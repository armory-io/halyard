/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'io.spinnaker.project' version "$spinnakerGradleVersion" apply false
  id 'com.google.protobuf' version "0.8.12" apply false
  id "com.jfrog.artifactory" version "4.13.0"
}

ext {
  buildVersion = calculateVersion()
}

subprojects {
  group = "com.netflix.spinnaker.halyard"
  apply plugin: 'io.spinnaker.project'
  apply plugin: 'java-library'
  apply plugin: 'groovy'
  apply plugin: 'com.jfrog.artifactory'
  apply plugin: 'maven-publish'

  test {
    testLogging {
      showStandardStreams = false
      exceptionFormat = 'full'
    }
    minHeapSize = "512m"
    maxHeapSize = "512m"
  }

  if ([korkVersion, fiatVersion, clouddriverVersion, front50Version].any { it.endsWith("-SNAPSHOT") }) {
    logger.info("Enabling mavenLocal")
    repositories {
      mavenLocal()
    }
  }

  dependencies {
    implementation platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")

    annotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
    annotationProcessor "org.projectlombok:lombok"
    testAnnotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
    testAnnotationProcessor "org.projectlombok:lombok"
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
      }
    }
  }

  artifactory {
    contextUrl = "https://armory.jfrog.io/armory"
    //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
      repository {
        repoKey = "gradle-dev"
        username = "${artifactory_user}"
        password = "${artifactory_password}"
        maven = true
      }
      defaults {
        publications('mavenJava')
        publishArtifacts = true
        publishPom = true
      }
    }

    configurations.all {
      resolutionStrategy {
        force group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.+'
        force group: 'com.github.ben-manes.caff eine', name: 'caffeine', version: '2.8.+' // Remove SONATYPE-2019-0282, upgrade caffeine dependency
        force group: 'com.hubspot.jinjava', name: 'jinjava', version: '2.5.+' // Remove CVE-2018-18893, upgrade jinjava dependency
        force group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '7.9'// Remove CVE-2019-17195
        force group: 'com.squareup.okhttp', name: 'okhttp', version: '2.7.+' // Remove CVE-2016-2402
        force group: 'com.squareup.okhttp', name: 'okhttp-apache', version: '2.7.+'
        force group: 'com.squareup.okhttp', name: 'okhttp-urlconnection', version: '2.7.+'
        force group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.+' // Remove CVE-2019-10173, upgrade xstream dependency
        force group: 'commons-codec', name: 'commons-codec', version: '1.+' // Remove CVE SONATYPE-2012-0050, upgrade commons-codec dependency
        force group: 'commons-collections', name: 'commons-collections4', version:'4.+'
        force group: 'commons-io', name: 'commons-io', version: '2.6'
        force group: 'commons-net', name: 'commons-net', version: '3.+' // Remove apache issue NET-579, upgrade commons-net dependency
        force group: 'io.netty', name: 'netty-codec-http', version: '4.1.+' // Remove CVE-2019-16869, upgrade netty-codec dependency
        force group: 'io.netty', name: 'netty-codec-http2', version: '4.1.+' // Remove CVE-2019-9518, upgrade netty-codec-http2 dependency
        force group: 'io.netty', name: 'netty-handler-proxy', version: '4.1.+' // Remove CVE-2019-9518, upgrade netty-handler-proxy dependency
        force group: 'org.apache.ant', name: 'ant', version: '1.10.+' // Remove CVE-2020-1945
        force group: 'org.apache.ant', name: 'ant-launcher', version: '1.10.+'
        force group: 'org.apache.commons', name: 'commons-compress', version: '1.+' // Remove CVE-2019-12402, upgrade commons-compress dependency
        force group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
        force group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.+'
        force group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.10' // Avoid duplicate groovy versions 2.5.7 and 2.5.10
        force group: 'org.codehaus.plexus', name: 'plexus-utils', version: '3.3.+' // Remove CVEs SONATYPE-2015-0173 and SONATYPE-2016-0398, upgrade plexus-utils dependency
        force group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.1.+' // Remove CVE-2019-10219, upgrade hibernate-validator depende      force group: 'org.testng', name: 'testng', version: '7.1.+' // Remove CVE SONATYPE-2019-0115, upgrade testng dependency
        force group: 'org.javassist', name: 'javassist', version: '3.19.0-GA'
        force group: 'org.jboss.logging', name: 'jboss-logging', version: '3.4.+' // Remove CVE-2017-2595, upgrade jboss-logging
        force group: 'org.springframework', name: 'spring-web', version: '5.2.3.RELEASE'
        force group: 'org.testng', name: 'testng', version: '7.1.+' // Remove CVE SONATYPE-2019-0115, upgrade testng dependency
        force group: 'org.yaml', name: 'snakeyaml', version: '1.26' // Remove CVE-2017-18640
      }
    }
  }

  task setVersion() {
    logger.info "Setting project version to: ${buildVersion}"
    project.setVersion(buildVersion)
  }
}

task version() {
  exec {
    workingDir projectDir
    commandLine 'mkdir', '-p', 'build'
  }
  def so = new FileOutputStream("build/version")
  exec {
    workingDir projectDir
    commandLine 'echo', "${version.toString().trim()}"
    standardOutput = so
  }
  println version
}

defaultTasks ':halyard-web:run'

// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
    }
  }
}

def calculateVersion() {
  if (version != 'unspecified') {
    logger.info "Version already present: ${version}"
    return version
  }
  // get git hash
  def gitHash = new ByteArrayOutputStream().withStream { soHash ->
    exec {
      workingDir projectDir
      commandLine 'git', 'rev-parse', '--short', 'HEAD'
      standardOutput = soHash
    }
    return soHash.toString().trim()
  }.toString()
  // determine if the re are uncommitted changes
  def gitStatus = new ByteArrayOutputStream().withStream { soStatus ->
    exec {
      workingDir projectDir
      commandLine 'git', 'status', '--porcelain'
      standardOutput = soStatus
    }
    return soStatus.toString().trim()
  }.toString()

  def newVersion = "operator-${gitHash}"
  if (gitStatus != '') {
    newVersion += '-uncommitted'
  }
  logger.info "Calculated version: ${newVersion}"
  project.setVersion(newVersion)
  return newVersion
}
